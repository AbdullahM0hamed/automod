apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.util.regex.Pattern
import java.util.zip.CRC32
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"                                                          
    defaultConfig {
        applicationId "auto.mod"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "automod.zip"
        }

        variant.assembleProvider.get().finalizedBy(automod)
    }

    task automod {
        doLast {
            def app = new File(project.projectDir.getAbsolutePath() + "/build/app.apk")
            if (!app.exists()) {
                new URL("https://github.com/LagradOst/QuickNovel/releases/download/v3.1.7/3.1.7.apk").withInputStream { i -> app.withOutputStream { it << i }}
            }
            def zApp = zipTree(app)
            def classList = zApp.matching { include 'classes*.dex' }.getFiles()
            def lastClass = classList[classList.size() - 1].getName()
            def number = lastClass.substring(7, lastClass.lastIndexOf('.'))
            if (number.isEmpty()) {
                number = "1"
            }
            def newFiles = zApp.getFiles()
            def j = 0
            def zipLoc = project.projectDir.getAbsolutePath() + "/build/outputs/apk/debug/automod.zip"
            def zip = new File(zipLoc)
            if (!zip.exists()) {
                zipLoc = zipLoc.replace("debug", "release")
            }
            for (File automodClass : zipTree(zipLoc).matching { include 'classes*.dex' }.getFiles()) {
                def cls = new File(project.projectDir.getAbsolutePath() + "/build/classes" + (number.toInteger() + 1 + j).toString() + ".dex")
                automodClass.withInputStream { i -> cls.withOutputStream { it << i }}
                newFiles.add(cls)
                j += 1
            }
            newFiles.addAll(zipTree(zipLoc).matching { include 'lib/' }.getFiles())
            def smali = new File(project.projectDir.getAbsolutePath() + "/build/smali.jar")
            if (!smali.exists()) {
                new URL("https://bitbucket.org/JesusFreke/smali/downloads/smali-2.5.2.jar").withInputStream { i -> smali.withOutputStream { it << i }}
            }
            def baksmali = new File(project.projectDir.getAbsolutePath() + "/build/baksmali.jar")
            if (!baksmali.exists()) {
                new URL("https://bitbucket.org/JesusFreke/smali/downloads/baksmali-2.5.2.jar").withInputStream { i -> baksmali.withOutputStream { it << i}}
            }
            def manifest = zApp.matching { include 'AndroidManifest.xml' }.singleFile
            def manifestLoc = new File(project.projectDir.getAbsolutePath() + "/build/AndroidManifest-orig.xml")
            manifest.withInputStream { i -> manifestLoc.withOutputStream { it << i }}
            def axml = new File(project.projectDir.getAbsolutePath() + "/build/axml.jar")
            if (!axml.exists()) {
                new URL("https://github.com/codyi96/xml2axml/releases/download/2.0.1/xml2axml-2.0.1.jar").withInputStream { i -> axml.withOutputStream { it << i }}
            }

            javaexec {
                main = "-jar"
                args = [axml.getAbsolutePath(), "d", manifestLoc.getAbsolutePath(), project.projectDir.getAbsolutePath() + "/build/decoded.xml"]
            }

            def decoded = Files.readString(Paths.get(project.projectDir.getAbsolutePath() + "/build/decoded.xml")) 
            def regex = Pattern.compile("application.*android:name", Pattern.DOTALL)
            def matcher = regex.matcher(decoded)
            def found = matcher.find()
	    def manifestEditor = new File(project.projectDir.getAbsolutePath() + "/build/manifest-editor.jar")
            if (!manifestEditor.exists()) {
                new URL("https://github.com/AbdullahM0hamed/ManifestEditor/releases/download/v0.0.1/manifest-editor.jar").withInputStream { i -> manifestEditor.withOutputStream { it << i}}
            }
	    if (found) {
                javaexec {
                    main = "-jar"
                    args = [manifestEditor.getAbsolutePath(), manifestLoc.getAbsolutePath(), "-md", "auto.mod.SettingsActivity: ", "--force"]
                }
                for (File classFile : classList) {
                    def clsFile = new File(project.projectDir.getAbsolutePath() + "/build/" + classFile.getName())
                    classFile.withInputStream { i -> clsFile.withOutputStream { it << i }}
                    javaexec {
                        main = "-jar"
                        args = [baksmali.getAbsolutePath(), "d", clsFile.getAbsolutePath(), "-o", project.projectDir.getAbsolutePath() + "/build/smali_" + clsFile.getName()]
                    }

                    def tree = fileTree(project.projectDir.getAbsolutePath() + "/build/smali_" + clsFile.getName())
                    for (File treeFile : tree.getFiles()) {
                        def path = Paths.get(treeFile.getAbsolutePath())
                        def charset = StandardCharsets.UTF_8
                        def content = new String(Files.readAllBytes(path), charset)
                        if (content.contains(".super Landroid/app/Application;")) {
                            content = content.replaceAll(".super Landroid/app/Application;", ".super Lauto/mod/App;")
                            Files.write(path, content.getBytes(charset))
                        }
                    }
                    javaexec {
                        main = "-jar"
                        args = [smali.getAbsolutePath(), "a", project.projectDir.getAbsolutePath() + "/build/smali_" + clsFile.getName(), "-o", project.projectDir.getAbsolutePath() + "/build/new_" + clsFile.getName()]
                    }
                }
            } else {
                javaexec {
                    main = "-jar"
                    args = [manifestEditor.getAbsolutePath(), manifestLoc.getAbsolutePath(), "-an", "auto.mod.App", "-md", "auto.mod.SettingsActivity: ", "--force"]
                }
            }
            def temp = zApp.getAsPath().substring(0, zApp.getAsPath().indexOf(":"))
            temp = temp.substring(0, temp.lastIndexOf("/") + 1)
            def updated = project.projectDir.getAbsolutePath() + "/build/updated.apk"
            try (ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(updated))) {
                for (File file : newFiles) {
                    def name = file.getAbsolutePath().replace(temp, "").replace(project.projectDir.getAbsolutePath() + "/build/", "")
                    if (name == "AndroidManifest.xml") {
                        file = new File(project.projectDir.getAbsolutePath() + "/build/AndroidManifest-orig-new.xml")
                    }
                    if (found) {
                        if (name.startsWith("classes") && name.endsWith(".dex")) {
                            def newFile = new File(project.projectDir.getAbsolutePath() + "/build/new_" + name)
                            if (newFile.exists()) {
                                file = newFile
                            }
                        }
                    }
                    if (name.startsWith("tmp/expandedArchives/automod.zip_")) {
                        name = name.substring(name.indexOf("lib"), name.size())
                    }
                    def entry = new ZipEntry(name)
                    byte[] buffer = new byte[4096]
                    int bytesRead
                    if (name == "resources.arsc") {
                        entry.setMethod(ZipEntry.STORED)
                        entry.setCompressedSize(file.length())
                        entry.setSize(file.length())
                        zOut.setLevel(0)
                        def crc = new CRC32()
                        try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file))) {
                            crc.reset()
                            while ((bytesRead = bis.read(buffer)) != -1) {
                                crc.update(buffer, 0, bytesRead)
                            }
                        }
                        entry.setCrc(crc.getValue())
                    }
                    zOut.putNextEntry(entry)
                    try (FileInputStream input = new FileInputStream(file)) {
                        while ((bytesRead = input.read(buffer)) != -1) {
                            zOut.write(buffer, 0, bytesRead)
                        }
                    }
                    zOut.closeEntry()
                }
            }
            if (zipLoc != zipLoc.replace("debug", "")) {
                def apk = file(updated)
                if (apk.exists()) {
                    def zipalign = sdkDirectory.getPath() + '/build-tools/' + buildToolsVersion + '/zipalign'
                    def zipaligned = project.projectDir.getAbsolutePath() + '/build/updated_zipaligned.apk'
                    exec {
                        commandLine zipalign, '-p', '-f', '-v', '4', updated, zipaligned
                    }
                    def debugKeystorePath = project.gradle.gradleUserHomeDir.parent + "/.android/debug.keystore"
                    def apksigner = sdkDirectory.getPath() + '/build-tools/' + buildToolsVersion + '/lib/apksigner.jar'
                    javaexec {
                        main = "-jar"
                        jvmArgs = ["-Xmx1024M"]
                        args = [apksigner, 'sign', '--ks', debugKeystorePath, '--ks-key-alias', 'androiddebugkey', '--ks-pass', 'pass:android', '--in', updated, '--out', zipaligned.replace("zipaligned", "zipaligned_signed")]
                    }
                }
            }
            def dex2jar = project.projectDir.getAbsolutePath() + "/build/dex2jar-jars-master"
            def dex2jarDir = new File(dex2jar)
            if (!dex2jarDir.exists()) {
                def dex2jarZip = new File(dex2jar + ".zip")
                new URL("https://github.com/AbdullahM0hamed/dex2jar-jars/archive/refs/heads/master.zip").withInputStream { i -> dex2jarZip.withOutputStream { it << i }}
                copy {
                    from zipTree(dex2jarZip.getAbsolutePath())
                    into dex2jar
                }
            }
            javaexec {
                main = "com.googlecode.dex2jar.tools.Dex2jarCmd"
                classpath = fileTree(dex2jar)
                args = [updated, "-o", project.projectDir.getAbsolutePath() + "/build/updated.jar"]
            }
            copy {
                include(project.projectDir.getAbsolutePath() + "/build/updated.jar")
            }
        }
    }

    tasks.build.finalizedBy(automod)
}

dependencies {
    implementation 'top.canyie.pine:core:0.2.8'
    debugImplementation 'com.willowtreeapps.hyperion:hyperion-core:0.9.38'
}
